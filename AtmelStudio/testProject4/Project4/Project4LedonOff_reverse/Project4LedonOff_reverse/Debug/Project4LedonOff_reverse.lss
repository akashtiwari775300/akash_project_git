
Project4LedonOff_reverse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005db  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000052a  00000000  00000000  00000767  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000264  00000000  00000000  00000c91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000334  00000000  00000000  00000f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  00001250  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001304  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	38 c0       	rjmp	.+112    	; 0xa6 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include <util/delay.h>

int main(void)
{
	int i;
	DDRB=0xff;
  38:	8f ef       	ldi	r24, 0xFF	; 255
  3a:	87 bb       	out	0x17, r24	; 23
    while (1) 
    {
		
		for(i=0;i<8;i++)
		{
			PORTB |=(1<<i);
  3c:	61 e0       	ldi	r22, 0x01	; 1
  3e:	70 e0       	ldi	r23, 0x00	; 0
	DDRB=0xff;
    /* Replace with your application code */
    while (1) 
    {
		
		for(i=0;i<8;i++)
  40:	80 e0       	ldi	r24, 0x00	; 0
  42:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTB |=(1<<i);
  44:	48 b3       	in	r20, 0x18	; 24
  46:	9b 01       	movw	r18, r22
  48:	08 2e       	mov	r0, r24
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__SREG__+0x11>
  4c:	22 0f       	add	r18, r18
  4e:	33 1f       	adc	r19, r19
  50:	0a 94       	dec	r0
  52:	e2 f7       	brpl	.-8      	; 0x4c <__SREG__+0xd>
  54:	24 2b       	or	r18, r20
  56:	28 bb       	out	0x18, r18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  58:	2f e3       	ldi	r18, 0x3F	; 63
  5a:	3d e0       	ldi	r19, 0x0D	; 13
  5c:	43 e0       	ldi	r20, 0x03	; 3
  5e:	21 50       	subi	r18, 0x01	; 1
  60:	30 40       	sbci	r19, 0x00	; 0
  62:	40 40       	sbci	r20, 0x00	; 0
  64:	e1 f7       	brne	.-8      	; 0x5e <__SREG__+0x1f>
  66:	00 c0       	rjmp	.+0      	; 0x68 <__SREG__+0x29>
  68:	00 00       	nop
	DDRB=0xff;
    /* Replace with your application code */
    while (1) 
    {
		
		for(i=0;i<8;i++)
  6a:	01 96       	adiw	r24, 0x01	; 1
  6c:	88 30       	cpi	r24, 0x08	; 8
  6e:	91 05       	cpc	r25, r1
  70:	49 f7       	brne	.-46     	; 0x44 <__SREG__+0x5>
  72:	87 e0       	ldi	r24, 0x07	; 7
  74:	90 e0       	ldi	r25, 0x00	; 0
			PORTB |=(1<<i);
			_delay_ms(1000);
		}
			for(i=7;i>0;i--)
			{
			PORTB &=~(1<<i);
  76:	38 b3       	in	r19, 0x18	; 24
  78:	ab 01       	movw	r20, r22
  7a:	08 2e       	mov	r0, r24
  7c:	02 c0       	rjmp	.+4      	; 0x82 <__SREG__+0x43>
  7e:	44 0f       	add	r20, r20
  80:	55 1f       	adc	r21, r21
  82:	0a 94       	dec	r0
  84:	e2 f7       	brpl	.-8      	; 0x7e <__SREG__+0x3f>
  86:	24 2f       	mov	r18, r20
  88:	20 95       	com	r18
  8a:	23 23       	and	r18, r19
  8c:	28 bb       	out	0x18, r18	; 24
  8e:	2f e3       	ldi	r18, 0x3F	; 63
  90:	3d e0       	ldi	r19, 0x0D	; 13
  92:	43 e0       	ldi	r20, 0x03	; 3
  94:	21 50       	subi	r18, 0x01	; 1
  96:	30 40       	sbci	r19, 0x00	; 0
  98:	40 40       	sbci	r20, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <__SREG__+0x55>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <__SREG__+0x5f>
  9e:	00 00       	nop
		for(i=0;i<8;i++)
		{
			PORTB |=(1<<i);
			_delay_ms(1000);
		}
			for(i=7;i>0;i--)
  a0:	01 97       	sbiw	r24, 0x01	; 1
  a2:	49 f7       	brne	.-46     	; 0x76 <__SREG__+0x37>
  a4:	cd cf       	rjmp	.-102    	; 0x40 <__SREG__+0x1>

000000a6 <_exit>:
  a6:	f8 94       	cli

000000a8 <__stop_program>:
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <__stop_program>
